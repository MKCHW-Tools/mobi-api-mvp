/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDiagnosisArgs } from "./CreateDiagnosisArgs";
import { UpdateDiagnosisArgs } from "./UpdateDiagnosisArgs";
import { DeleteDiagnosisArgs } from "./DeleteDiagnosisArgs";
import { DiagnosisFindManyArgs } from "./DiagnosisFindManyArgs";
import { DiagnosisFindUniqueArgs } from "./DiagnosisFindUniqueArgs";
import { Diagnosis } from "./Diagnosis";
import { PatientFindManyArgs } from "../../patient/base/PatientFindManyArgs";
import { Patient } from "../../patient/base/Patient";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { DiagnosisService } from "../diagnosis.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Diagnosis)
export class DiagnosisResolverBase {
  constructor(
    protected readonly service: DiagnosisService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Diagnosis",
    action: "read",
    possession: "any",
  })
  async _diagnosesMeta(
    @graphql.Args() args: DiagnosisFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Diagnosis])
  @nestAccessControl.UseRoles({
    resource: "Diagnosis",
    action: "read",
    possession: "any",
  })
  async diagnoses(
    @graphql.Args() args: DiagnosisFindManyArgs
  ): Promise<Diagnosis[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Diagnosis, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Diagnosis",
    action: "read",
    possession: "own",
  })
  async diagnosis(
    @graphql.Args() args: DiagnosisFindUniqueArgs
  ): Promise<Diagnosis | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Diagnosis)
  @nestAccessControl.UseRoles({
    resource: "Diagnosis",
    action: "create",
    possession: "any",
  })
  async createDiagnosis(
    @graphql.Args() args: CreateDiagnosisArgs
  ): Promise<Diagnosis> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Diagnosis)
  @nestAccessControl.UseRoles({
    resource: "Diagnosis",
    action: "update",
    possession: "any",
  })
  async updateDiagnosis(
    @graphql.Args() args: UpdateDiagnosisArgs
  ): Promise<Diagnosis | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Diagnosis)
  @nestAccessControl.UseRoles({
    resource: "Diagnosis",
    action: "delete",
    possession: "any",
  })
  async deleteDiagnosis(
    @graphql.Args() args: DeleteDiagnosisArgs
  ): Promise<Diagnosis | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Patient])
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  async patient(
    @graphql.Parent() parent: Diagnosis,
    @graphql.Args() args: PatientFindManyArgs
  ): Promise<Patient[]> {
    const results = await this.service.findPatient(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(
    @graphql.Parent() parent: Diagnosis,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
